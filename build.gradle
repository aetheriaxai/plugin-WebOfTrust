apply plugin: 'java'
defaultTasks 'jar', 'test'
sourceSets.main.java.srcDirs = ['src/']
sourceSets.test.java.srcDirs = ['test/']
sourceCompatibility = targetCompatibility = 7
tasks.withType(JavaCompile) { options.encoding = "UTF-8" }
javadoc.enabled = false

repositories {
	if(System.getenv('WOT__DOWNLOAD_DEPENDENCIES') == '1') {
		println 'WARNING: Download of dependencies is enabled! Watch out for supply chain attacks!'
		mavenCentral()
	}
}

configurations { junit } // Needed when we manually specify the tests' classpath
dependencies {
	// Run fred's Gradle with "./gradlew jar copyRuntimeLibs" to produce this directory
	// TODO: mvn.freenetproject.org is not browseable so I don't know the proper URI for fred and
	// its dependencies and hence am including the dependencies as flat files.
	// Use Gradle's dependency management + gradle-witness once this has been resolved.
	compile fileTree(dir: '../fred/build/output/', include: '*.jar')
	compile files('db4o-7.4/db4o.jar')
	if(System.getenv('WOT__DOWNLOAD_DEPENDENCIES') == '1')
		junit('junit:junit:4.11') // Hamcrest is automatically included as transitive dependency.
	else
		junit files('/usr/share/java/junit4.jar', '/usr/share/java/hamcrest-core.jar')
	testCompile configurations.junit
}

task compileDb4o(type: Exec) {
	// See https://bugs.freenetproject.org/view.php?id=7058
	outputs.upToDateWhen { file('db4o-7.4/db4o.jar').exists() }
	workingDir 'db4o-7.4'
	commandLine 'ant', "-Djavac.source.version=" + sourceCompatibility,
	                   "-Djavac.target.version=" + targetCompatibility
}

compileJava {
	dependsOn 'compileDb4o'
}

task prepareVersionFile(type: Copy) {
	outputs.upToDateWhen { false }
	from sourceSets.main.java.srcDirs ; into "${buildDir}/custom/versionFileJava/"
	include 'plugins/WebOfTrust/Version.java' ; filter {
		it.replaceAll("@custom@", "git describe --always --abbrev=4 --dirty".execute().text.trim())
	}
}

task compileVersionFile(type: JavaCompile, dependsOn: ['compileJava', 'prepareVersionFile']) {
	classpath = sourceSets.main.compileClasspath
	source = prepareVersionFile.destinationDir
	destinationDir = file("${buildDir}/custom/versionFileClass/")
}

["jar", "testJar"].each { jarType ->
task("$jarType", type: Jar, overwrite: true, dependsOn: tasks.withType(AbstractCompile)) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
	duplicatesStrategy = "fail"
	baseName = (jarType == 'testJar') ? 'WebOfTrust-with-unit-tests' : 'WebOfTrust'
	destinationDir = new File(projectDir, (jarType == 'testJar') ? "build-test" : "dist")
	manifest { attributes("Plugin-Main-Class": "plugins.WebOfTrust.WebOfTrust") }
	
	from(sourceSets.main.output.classesDir) { exclude 'plugins/WebOfTrust/Version.class' }
	from(compileVersionFile.destinationDir) { include 'plugins/WebOfTrust/Version.class' }
	from(sourceSets.main.java.srcDirs) { include 'plugins/WebOfTrust/l10n/*.l10n' }
	from zipTree('db4o-7.4/db4o.jar')
	if(jarType == 'testJar') from sourceSets.test.output.classesDir
}}

test {
	dependsOn 'testJar'
	
	// Reset classpath to only use the JAR, not the class files, because some WoT test need a JAR to
	// load into a Freenet node, and given the JAR is needed we shouldn't duplicate its classes.
	classpath = fileTree(dir: '../fred/build/output/', include: '*.jar')
	classpath+= files(testJar.archivePath)
	classpath+= configurations.junit
	
	scanForTestClasses = false
	include '**/*Test*.class'
	// Must exclude member classes: Java creates them for switch() upon enums, JUnit would complain
	exclude '**/*$*.class'
	exclude '**/*Benchmark*.class'
	exclude 'com/db4o/**'
	if(!hasProperty('test.unreliable')) {
		exclude '**/SynchronousDelayedBackgroundJobTest.class'
		exclude '**/TickerDelayedBackgroundJobTest.class'
	}
	
	// FIXME: Workaround attempt for db4o breaking, and thus unit tests failing, with Java >= 16.
	// If this works then properly document it, if not remove it.
	// Also figure out a way for how to apply it when running Freetalk in an actual Freenet node.
	jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
	
	/* TODO: Performance: As of 2019-04-28 doesn't work on Travis CI yet because the Gradle version
	/* on Ubuntu Trusty is too old - and we cannot use Ubuntu Xenial because Java 7 doesn't work
	/* there but it is still the minimal Java version required by Freenet. */
	// failFast = true
	maxHeapSize = "512m"
	maxParallelForks = Runtime.runtime.availableProcessors()
	forkEvery = 1 // One VM per test, for safety and probably needed for maxParallelForks to work
	systemProperties += [
		"is_WOT_unit_test": "true",
		"WOT_test_jar": testJar.archivePath
	]
	workingDir = "${buildDir}/tmp/testsWorkingDir"
	doFirst { delete workingDir ; mkdir workingDir }
	
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
		
		// Allow enabling stdout/stderr so developers can obtain random seeds to reproduce failed
		// test runs.
		// TODO: Code quality: Have developers (by updating the README.md) and .travis.yml do this
		// on the command line without requiring this code here once Travis CI contains a
		// sufficiently recent Gradle for
		// "-Doverride.test.testLogging.info.showStandardStreams=true" to work.
		// Notice that the ".info" may be a typo from the person who posted this to
		// stackoverflow.com as the working code below does not contain ".info", so you may have to
		// remove that string.
		//
		// Enabling stdout/stderr requires us to tell Gradle to assume that the outputs are
		// outdated to ensure they are updated even if the user doesn't run the 'clean' target.
		outputs.upToDateWhen { false }
		showStandardStreams = (System.getenv('WOT__SHOW_GRADLE_TEST_OUTPUT') == '1')
	}
}

clean {
	[ 'build-test', 'test-coverage', 'dist' ].each { // Beyond defaults also delete Ant's output
		delete "${projectDir}/" + it }
	doLast { exec { workingDir 'db4o-7.4' ; commandLine 'ant','clean' } }
}
